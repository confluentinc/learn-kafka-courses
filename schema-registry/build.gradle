buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id "com.google.protobuf" version "0.8.19"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.6.0"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.21.1'
    implementation 'org.apache.avro:avro:1.11.0'
    implementation "io.confluent:kafka-avro-serializer:7.1.1"
    implementation "io.confluent:kafka-protobuf-serializer:7.1.1"
    implementation "io.confluent:kafka-protobuf-provider:7.1.1"

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'

    implementation('org.apache.kafka:kafka-streams:3.2.1') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }
    implementation('org.apache.kafka:kafka-clients:3.2.1')

}

protobuf {
    generatedFilesBaseDir = "${project.buildDir}/generated-main-proto-java"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.2'
    }
}

// See https://github.com/ImFlog/schema-registry-plugin for more details on configuring the Schema Registry plugin
schemaRegistry {
    def props = new Properties()
    file("src/main/resources/confluent.properties").withInputStream { props.load(it) }
    def srUrl = props.getProperty("schema.registry.url")
    def fullAuth = props.getProperty("basic.auth.user.info")
    if (srUrl != null && fullAuth != null) {
        // println "Using Schema Registry endpoint:${srUrl}, username:${auth[0]},password:${auth[1]}"
        def auth = fullAuth.split(":")
        url = srUrl

        credentials {
            // username is the characters up to the ':' in the basic.auth.user.info property
            username = auth[0]
            // password is everything after ':' in the basic.auth.user.info property
            password = auth[1]
        }
    } else {
        println("Expected to find the [schema.registry.url] and [basic.auth.user.info]")
    }

    register {
        subject('avro-purchase-value', 'src/main/avro/purchase.avsc', 'AVRO')
        subject('proto-purchase-value', 'src/main/proto/purchase.proto', 'PROTOBUF')
    }

    download {
        // commented out to prevent its download which results in the schema 
        // definition json being flattened to a single line which doesn't
        // match the exercise illustration
        // subject('avro-purchase-value', 'src/main/avro', 'purchase')
        subject('proto-purchase-value', 'src/main/proto', 'purchase')
    }

    compatibility {
        subject('avro-purchase-value', 'src/main/avro/purchase.avsc', 'AVRO')
        subject('proto-purchase-value', 'src/main/proto/purchase.proto', 'PROTOBUF')
    }
}


task runProducer(type: Exec) {
    var clientFullPath = 'io.confluent.developer.ProducerApp'
    dependsOn assemble
    group = "Execution"
    description = "This task executes the Producer for the Schema Registry integration exercise"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), clientFullPath
}


task runConsumer(type: Exec) {
    var clientFullPath = 'io.confluent.developer.ConsumerApp'
    dependsOn assemble
    group = "Execution"
    description = "This task executes the Consumer for the Schema Registry integration exercise"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), clientFullPath
}


